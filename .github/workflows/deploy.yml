name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          ssh-keyscan -H 54.255.228.223 >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 54.255.228.223
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GH_ID,GH_SECRET,GOOGLE_CLIENT_ID,GOOGLE_CLIENT_SECRET,LIVEBLOCK_SECRET,NEXTAUTH_SECRET,NEXT_PUBLIC_BACKEND_URL,NEXT_PUBLIC_DATABASE_URL,NEXT_PUBLIC_ENVIRONMENT,NEXT_PUBLIC_LIVEBLOCK_KEY,SIGNING_SECRET,UPLOADTHING_TOKEN
          env:
            GH_ID: ${{ secrets.GH_ID }}
            GH_SECRET: ${{ secrets.GH_SECRET }}
            GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
            LIVEBLOCK_SECRET: ${{ secrets.LIVEBLOCK_SECRET }}
            NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
            NEXT_PUBLIC_BACKEND_URL: ${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
            NEXT_PUBLIC_DATABASE_URL: ${{ secrets.NEXT_PUBLIC_DATABASE_URL }}
            NEXT_PUBLIC_ENVIRONMENT: ${{ secrets.NEXT_PUBLIC_ENVIRONMENT }}
            NEXT_PUBLIC_LIVEBLOCK_KEY: ${{ secrets.NEXT_PUBLIC_LIVEBLOCK_KEY }}
            SIGNING_SECRET: ${{ secrets.SIGNING_SECRET }}
            UPLOADTHING_TOKEN: ${{ secrets.UPLOADTHING_TOKEN }}
          script: |
            # Source profile to ensure all environment variables and paths are properly set
            source ~/.bashrc
            source ~/.profile

            # Use absolute paths to binaries or export correct PATH
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

            cd ~
            rm -rf serene-v3/
            git clone https://github.com/Pritam12F/serene-v3.git
            cd serene-v3/

            # Install global tools if needed
            if ! command -v pnpm &> /dev/null; then
              npm i -g pnpm
            fi

            if ! command -v pm2 &> /dev/null; then
              npm i -g pm2
            fi

            pnpm install
            pnpm run build

            # Check if PM2 process exists and restart or start new
            if pm2 list | grep -q "serene"; then
              pm2 restart serene
            else
              pm2 start npm --name "serene" -- start
            fi
