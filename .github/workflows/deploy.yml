name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          ssh-keyscan -H 54.255.228.223 >> ~/.ssh/known_hosts
          export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 54.255.228.223
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Ensure correct environment setup
            source ~/.bashrc
            source ~/.profile

            # Load NVM if installed
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            # Export environment variables for the application
            export GH_ID=${{ secrets.GH_ID }}
            export GH_SECRET=${{ secrets.GH_SECRET }}
            export GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            export GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            export LIVEBLOCK_SECRET=${{ secrets.LIVEBLOCK_SECRET }}
            export NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            export NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
            export NEXT_PUBLIC_DATABASE_URL=${{ secrets.NEXT_PUBLIC_DATABASE_URL }}
            export NEXT_PUBLIC_ENVIRONMENT=${{ secrets.NEXT_PUBLIC_ENVIRONMENT }}
            export NEXT_PUBLIC_LIVEBLOCK_KEY=${{ secrets.NEXT_PUBLIC_LIVEBLOCK_KEY }}
            export SIGNING_SECRET=${{ secrets.SIGNING_SECRET }}
            export UPLOADTHING_TOKEN=${{ secrets.UPLOADTHING_TOKEN }}

            # Navigate to home and pull the latest code
            cd ~
            rm -rf serene-v3/
            git clone https://github.com/Pritam12F/serene-v3.git
            cd serene-v3/

            # Ensure pnpm and pm2 are installed
            if ! command -v pnpm &> /dev/null; then
              npm install -g pnpm
            fi

            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi

            # Install dependencies and build the project
            pnpm install
            pnpm run build

            # Check if PM2 process exists and restart or start a new one
            if pm2 list | grep -q "serene"; then
              pm2 restart serene
            else
              pm2 start "pnpm start" --name "serene"
            fi
